; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
; uncomment only one
; default_envs = windows_64
; default_envs = mac_64
 default_envs = elecrow_c3_1_28 ; ELECROW C3 LCD 1.28
; default_envs = lolin_c3_mini ; ESP32-C3 LVGL 1.28 Inch 240x240
; default_envs = lolin_s3_mini_1_28 ; Waveshare ESP32-S3-Touch-LCD-1.28
; default_envs = lolin_s3_mini_1_69 ; Waveshare ESP32-S3-Touch-LCD-1.69
; default_envs = esp32doit-devkit-v1
; default_envs = pipico ; raspberry pi pico
; default_envs = pipico2 ; raspberry pi pico 2

[env]
lib_deps = 
	lvgl/lvgl@^9.2.2
build_flags = 
;   -D LV_CONF_INCLUDE_SIMPLE

[emulator_64]
platform = native@^1.1.3
extra_scripts = support/sdl2_build_extra.py
build_flags = 
	${env.build_flags}
	!python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/sdl2')]))"
	-lSDL2
	-D LV_LVGL_H_INCLUDE_SIMPLE
	-D LV_CONF_PATH="${PROJECT_DIR}/include/lv_conf.h"
	-D LV_MEM_CUSTOM=1
	-D LV_USE_QRCODE=1
	-D LV_DRV_NO_CONF
	-D LV_USE_SDL=1
	-D SDL_HOR_RES=240
	-D SDL_VER_RES=240
	-D SDL_ZOOM=1
lib_deps = 
	${env.lib_deps}
build_src_filter = 
	+<*>
	+<../hal/sdl2>

[emulator_32]
extends = emulator_64
build_flags = 
	${emulator_64.build_flags}
	-m32
build_src_filter = 
	${emulator_64.build_src_filter}

[env:windows_64]
extends = emulator_64
build_flags = 
	${emulator_64.build_flags}
	-L C:/msys64/mingw64/lib/
	-D SDL_INCLUDE_PATH="\"C:/msys64/mingw64/include/SDL2/SDL.h\""
build_src_filter = ${emulator_64.build_src_filter}

[env:mac_64]
extends = emulator_64
build_flags = 
	${emulator_64.build_flags}
	-D SDL_INCLUDE_PATH="\"SDL2/SDL.h"\"
	!find /opt/homebrew/Cellar/sdl2 -name "include" | sed "s/^/-I /"
	!find /opt/homebrew/Cellar/sdl2 -name "libSDL2.a" | xargs dirname | sed "s/^/-L /"

	; -D LV_MEM_CUSTOM=1
	-D LV_MEM_SIZE="(128U * 1024U)"
build_src_filter = ${emulator_64.build_src_filter}

[esp32]
platform = espressif32
framework = arduino
extra_scripts = post:support/esp32_build_extra.py
lib_deps = 
	${env.lib_deps}
	lovyan03/LovyanGFX@^1.1.16
	fbiego/ChronosESP32@^1.5.0
	fbiego/Timber@^1.0.0
	bblanchon/ArduinoJson@^7.1.0
build_flags = 
	!python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/esp32')]))"
	-D LV_CONF_PATH="${PROJECT_DIR}/include/lv_conf.h"
	-I lib
	-D LV_TICK_CUSTOM=1
	-D LV_MEM_CUSTOM=0
	-D LV_USE_FS_FATFS=1
build_src_filter = 
	+<*>
	+<../hal/esp32>

; ELECROW C3 LCD 1.28
[env:elecrow_c3_1_28]
extends = esp32
board = lolin_c3_mini
board_build.partitions = partitions.csv
lib_deps = 
	${esp32.lib_deps}
	makuna/RTC@^2.4.3
 	MAX30102=https://github.com/DFRobot/DFRobot_MAX30102
build_flags = 
	${esp32.build_flags}
	-D ELECROW_C3=1
	-D LV_MEM_SIZE=120U*1024U
	-D LV_USE_QRCODE=1
	; -D ENABLE_CUSTOM_FACE=1
	-D LV_MEM_ADR=0
build_src_filter = ${esp32.build_src_filter}

; ESP32-C3 LVGL 1.28 Inch 240x240
[env:lolin_c3_mini]
extends = esp32
board = lolin_c3_mini
board_build.partitions = partitions.csv
lib_deps = ${esp32.lib_deps}
build_flags = 
	${esp32.build_flags}
	-D ESPC3=1
	-D LV_MEM_SIZE=120U*1024U
	-D LV_USE_QRCODE=1
	; -D ENABLE_CUSTOM_FACE=1
	-D LV_MEM_ADR=0
build_src_filter = ${esp32.build_src_filter}

; Waveshare ESP32-S3-Touch-LCD-1.28
[env:lolin_s3_mini_1_28]
extends = esp32
board = lolin_s3_mini
board_upload.flash_size = 16MB
board_build.flash_mode = dio
board_build.f_flash = 80000000L
board_build.partitions = partitions_16M.csv
lib_deps = 
	${esp32.lib_deps}
	FastIMU=https://github.com/LiquidCGS/FastIMU/archive/refs/tags/1.2.6.zip
build_flags = 
	${esp32.build_flags}
	-D ESPS3_1_28=1
	-D LV_MEM_SIZE=120U*1024U
	; -D ENABLE_CUSTOM_FACE=1
	-D LV_USE_QRCODE=1
build_src_filter = ${esp32.build_src_filter}

; Waveshare ESP32-S3-Touch-LCD-1.69
[env:lolin_s3_mini_1_69]
extends = esp32
board = esp32-s3-devkitc-1
board_upload.flash_size = 16MB
board_build.flash_mode = dio
board_build.f_flash = 80000000L
board_build.partitions = partitions_16M.csv ; app3M_fat9M_16MB.csv
lib_deps = 
	${esp32.lib_deps}
	FastIMU=https://github.com/LiquidCGS/FastIMU/archive/refs/tags/1.2.6.zip
build_flags = 
	${esp32.build_flags}
	-D ESPS3_1_69=1
	-D LV_MEM_SIZE=120U*1024U
	-D LV_USE_QRCODE=1
build_src_filter = ${esp32.build_src_filter}

[env:esp32doit-devkit-v1]
extends = esp32
board = esp32doit-devkit-v1
board_build.partitions = partitions.csv
lib_deps = ${esp32.lib_deps}
build_flags = 
	${esp32.build_flags}
	-D LV_MEM_SIZE=60U*1024U
	-D LV_MEM_ADR=0
build_src_filter = ${esp32.build_src_filter}


[pico]
extra_scripts = post:support/esp32_build_extra.py
lib_deps = 
	${env.lib_deps}
	lovyan03/LovyanGFX@^1.1.16
	fbiego/Timber@^1.0.0
	bblanchon/ArduinoJson@^7.1.0
build_flags = 
	!python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/pico')]))"
	-D LV_CONF_PATH="${PROJECT_DIR}/include/lv_conf.h"
	-I lib
	-D LV_TICK_CUSTOM=1
	-D LV_MEM_CUSTOM=0
build_src_filter = 
	+<*>
	+<../hal/pico>

[env:pipico]
extends = pico
platform = raspberrypi
board = pico
framework = arduino
lib_deps = ${pico.lib_deps}
build_flags = 
	${pico.build_flags}
	-D LV_MEM_SIZE=96U*1024U
	-D LV_USE_QRCODE=1
	-D NO_WATCHFACES=1
build_src_filter = ${pico.build_src_filter}

[env:pipico2]
extends = pico
platform = https://github.com/maxgerhardt/platform-raspberrypi.git
board = rpipico2
framework = arduino
board_build.core = earlephilhower
lib_deps = ${pico.lib_deps}
build_flags = 
	${pico.build_flags}
	-D LV_USE_QRCODE=1
	-D NO_WATCHFACES=1
build_src_filter = ${pico.build_src_filter}


